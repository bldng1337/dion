name: Build

on:
  push:
    tags:
      - v*

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref_name }}
#   cancel-in-progress: true

jobs:
  Build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # - macOS-latest TODO: do macOS builds
          - windows-latest
        build_mode:
          - release
    env:
      CARGOKIT_VERBOSE: 1
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@44ac965b96f18d999802d4b807e3256d5a3f9fa1 # 2.16.0
        with:
          channel: "stable"
      - name: Install GTK
        if: (matrix.os == 'ubuntu-latest')
        run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install ninja-build
        if: (matrix.os == 'ubuntu-latest')
        run: sudo apt-get update && sudo apt-get install ninja-build
      - name: Set up JDK 17
        if: (matrix.os == 'ubuntu-latest')
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Android SDK
        if: (matrix.os == 'ubuntu-latest')
        uses: android-actions/setup-android@v3
      - name: List files in cmdline-tools
        if: (matrix.os == 'ubuntu-latest')
        run: ls -la $ANDROID_HOME/cmdline-tools
      # - name: List files in cmdline-tools
      #   if: (matrix.os == 'ubuntu-latest')
      #   run: cd /root/.android/sdk/cmdline-tools && ls -la
      # - name: Move cmdline-tools for CargoKit
      #   if: (matrix.os == 'ubuntu-latest')
      #   run: mv /root/.android/sdk/cmdline-tools/11.0 /root/.android/sdk/cmdline-tools/latest
      - name: Install Clang
        uses: egor-tensin/setup-clang@v1.4
        with:
          version: latest
          platform: x64
      - name: Setup cmake
        if: (matrix.os == 'ubuntu-latest')
        uses: jwlawson/actions-setup-cmake@v2
      - name: Pub Get
        run: flutter pub get
      - name: Build Launcher Icons
        run: flutter pub run flutter_launcher_icons
      - name: Install mpv
        if: (matrix.os == 'ubuntu-latest')
        run: sudo apt install libmpv-dev mpv

      - name: Create output directory
        run: mkdir -p ./output

      - name: Versions
        run: |
          flutter --version
          dart --version
          cargo --version
      - name: Ubuntu Versions
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake --version
          ninja --version
          clang --version
          javac --version

      # - name: Build Linux (${{ matrix.build_mode }})
      #   if: matrix.os == 'ubuntu-latest'
      #   shell: bash
      #   run: flutter build linux --${{ matrix.build_mode }} --verbose
      - name: Build Android (${{ matrix.build_mode }})
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: flutter build apk --${{ matrix.build_mode }} --verbose
      - name: Sign APK
        if: matrix.os == 'ubuntu-latest'
        run: |
         zipalign -c -P 16 -v 4 build/app/outputs/flutter-apk/app-${{ matrix.build_mode }}.apk
         echo "${{ secrets.KEYSTORE }}" | base64 -d > android/keystore.jks
         echo "${{ secrets.KEY_PASSWORD }}" > android/keypass
         echo "${{ secrets.KEYSTORE_PASSWORD }}" > android/storepass
         apksigner sign --ks android/keystore.jks --key-pass file:android/keypass --ks-pass file:android/storepass --ks-key-alias dion --verbose build/app/outputs/flutter-apk/app-${{ matrix.build_mode }}.apk
         apksigner verify --print-certs --verbose build/app/outputs/flutter-apk/app-${{ matrix.build_mode }}.apk
      - name: Move APK
        if: matrix.os == 'ubuntu-latest'
        run: mv build/app/outputs/flutter-apk/app-${{ matrix.build_mode }}.apk ./output/dion-${{ matrix.build_mode }}.apk

      - name: Build macOS (${{ matrix.build_mode }})
        if: matrix.os == 'macos-latest'
        shell: bash
        run: flutter build macos --${{ matrix.build_mode }}  --verbose
      - name: Build iOS (${{ matrix.build_mode }})
        if: matrix.os == 'macos-latest'
        shell: bash
        run: flutter build ios --${{ matrix.build_mode }} --no-codesign  --verbose
      - name: Build iOS (${{ matrix.build_mode }}) - flavor1
        if: matrix.os == 'macos-latest'
        shell: bash
        run: flutter build ios --flavor flavor1 --${{ matrix.build_mode }} --no-codesign --verbose

      - name: Build Windows (${{ matrix.build_mode }})
        if: matrix.os == 'windows-latest'
        shell: bash
        run: flutter build windows --${{ matrix.build_mode }} --verbose
      - name: Build iss script
        if: matrix.os == 'windows-latest'
        run: dart run inno_bundle:build --no-app --release --no-installer
      - name: Build installer
        if: matrix.os == 'windows-latest'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: ./build/windows/x64/installer/Release/inno-script.iss
      - name: Move installer
        if: matrix.os == 'windows-latest'
        run: mv ./build/windows/x64/installer/Release/*.exe ./output/

      - uses: actions/upload-artifact@v4
        with:
          path: "./output/*"
          name: dion-${{ matrix.os }}-${{ matrix.build_mode }}
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "./output/*"
          allowUpdates: true
